{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mgenerate4j is a java library that makes generating test data for MongoDB easy. Rich, representative test data can be generated from a template and loaded directly into MongoDB (or output to a file). mgenerate4j can generate a wide variety of common data (e.g. names, addresses, emails, ip address) but is easy to extend if you need to do generate something that isn\u2019t covered by the out-of-the-box functions. What does it look like? This is an example of a simple template: { \"name\" : \"$name\" , \"age\" : \"$age\" , \"emails\" : { \"$array\" : { \"of\" : \"$email\" , \"number\" : 2 } } } And here\u2019s what the output might look like: { \"name\" : \"Jeffery Dooley\" , \"age\" : 71 , \"emails\" : [ \"daisy.monahan@hotmail.com\" , \"jacey.bauch@hotmail.com\" ] } To generate and load documents into MongoDB from a template, the CLI can be used: $ java -jar mgenerate.jar load --uri \"mongodb://localhost:27017\" template.json Installation \u00b6 mgenerate4j is distributed through Maven Central . To import as a maven dependency: <dependency> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-core </artifactId> <version> 0.0.7 </version> </dependency> To import as a gradle dependency: dependencies { compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.7' } Precompiled executable jars are also available in releases .","title":"Home"},{"location":"#installation","text":"mgenerate4j is distributed through Maven Central . To import as a maven dependency: <dependency> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-core </artifactId> <version> 0.0.7 </version> </dependency> To import as a gradle dependency: dependencies { compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.7' } Precompiled executable jars are also available in releases .","title":"Installation"},{"location":"changelog/","text":"Changelog \u00b6 Unreleased \u00b6 0.0.7 - 2020-09-14Z \u00b6 Added \u00b6 file-based variables can now be referred to in a template probability parameter added to $boolean operator delete and update commands added to CLI sample command added to CLI Changed \u00b6 bump to Gradle 6.6.1 Fixed \u00b6 LongSequence operator alias incorrectly referred to \u2018intSequence\u2019 0.0.6 - 2020-08-17Z \u00b6 Added \u00b6 mkdoc documentation on gh-pages CLI module Changed \u00b6 Maven -> Gradle build Travis -> GH Action for CI build Fixed \u00b6 Some stuff 0.0.5 - 2019-10-04 \u00b6","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#007-2020-09-14z","text":"","title":"0.0.7 - 2020-09-14Z"},{"location":"changelog/#added","text":"file-based variables can now be referred to in a template probability parameter added to $boolean operator delete and update commands added to CLI sample command added to CLI","title":"Added"},{"location":"changelog/#changed","text":"bump to Gradle 6.6.1","title":"Changed"},{"location":"changelog/#fixed","text":"LongSequence operator alias incorrectly referred to \u2018intSequence\u2019","title":"Fixed"},{"location":"changelog/#006-2020-08-17z","text":"","title":"0.0.6 - 2020-08-17Z"},{"location":"changelog/#added_1","text":"mkdoc documentation on gh-pages CLI module","title":"Added"},{"location":"changelog/#changed_1","text":"Maven -> Gradle build Travis -> GH Action for CI build","title":"Changed"},{"location":"changelog/#fixed_1","text":"Some stuff","title":"Fixed"},{"location":"changelog/#005-2019-10-04","text":"","title":"0.0.5 - 2019-10-04"},{"location":"custom-operators/","text":"Custom Operators \u00b6 If the out-of-the-box operators don\u2019t meet your needs, you can create your own. Setup \u00b6 mgenerate4j uses compile-time annotation processing so you will need to enable this: Maven <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <configuration> <annotationProcessorPaths> <path> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-apt </artifactId> <version> 0.0.5 </version> </path> </annotationProcessorPaths> </configuration> </plugin> </plugins> </build> Gradle dependencies { annotationProcessor 'uk.dioxic.mgenerate:mgenerate-apt:0.0.5' compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.5' } Gradle KT dependencies { annotationProcessor ( \"uk.dioxic.mgenerate:mgenerate-apt:0.0.5\" ) compile ( \"uk.dioxic.mgenerate:mgenerate-core:0.0.5\" ) } Basics \u00b6 Creating a new operator is easy, in 3 simple steps: Create a new class Implement the Resolvable interface or extend the AbstractOperator class Annotate with @Operator @Operator public class Hello extends AbstractOperator < String > { @Override public String resolveInternal () { return \"hello world!\" ; } } The annotation processor will automatically create a builder class for your operator at compile-time in the same package. You then add the builder to the OperatorFactory by either giving it the builder class or it\u2019s package. public class Main { static { // add single operator builder OperatorFactory . addBuilder ( HelloBuilder . class ); // add all operator builders under this package signature OperatorFactory . addBuilder ( \"com.example\" ); } } Your custom operator can then be used just like any other operator. Template { \"greeting\" : \"$hello\" } Output { \"greeting\" : \"hello world!\" } Aliasing \u00b6 By default, the operator name will be the same as the lower-case class name but it can be given one or more aliases by specifying the value attribute on the @Operator annotation. @Operator ({ \"greet\" , \"sayhello\" }) public class Hello extends AbstractOperator < String > { @Override public String resolveInternal () { return \"hello world!\" ; } } Template { \"greeting\" : \"$hello\" , \"greeting2\" : \"$greeting\" , \"greeting3\" : \"$sayhello\" } Output { \"greeting\" : \"hello world!\" , \"greeting2\" : \"hello world!\" , \"greeting3\" : \"hello world!\" } Arguments \u00b6 If you want to pass arguments into your operator you can annotation either a class-level variable or method with the @OperatorProperty annotation. These will need to be either package-protected or public. If the property is required, set the required attribute on the annotation. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty ( required = true ) String name ; @Override public String resolveInternal () { return \"hello \" + name + \"!\" ; } } Template { \"greeting\" : { \"$greet\" : \"Bob\" } } Output { \"greeting\" : \"hello Bob!\" } ``` Dynamic Arguments \u00b6 We can pass another operator into our customGreeting property and this will work fine, however, in this mode, the input operator will be hydrated only once. So, every document generated will have the same value. Template { \"greeting\" : { \"$greet\" : \"$first\" } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Bob!\" } If we want the input operator to be resolved separately for every generated document then we need the input variable to be a Resolvable type and resolve it in our resolveInternal method. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty ( required = true ) Resolvable < String > name ; @Override public String resolveInternal () { return \"hello \" + name . resolve () + \"!\" ; } } Template { \"greeting\" : { \"$greet\" : \"$first\" } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Mike!\" } { \"greeting\" : \"hello Stavros!\" } Default Values \u00b6 We can set defaults for our operator properties. If we are using Resolvable types then we need to wrap them using the Wrapper helper. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty String greeting = \"hello\" ; @OperatorProperty Resolvable < String > name = Wrapper . wrap ( \"Bob\" ); @Override public String resolveInternal () { return greeting + \" \" + name . resolve () + \"!\" ; } } Template { \"greeting\" : \"$greet\" { \"greeting\" : { \"$greet\" : { \"greeting\" : \"bonjour\" , \"name\" : \"Stavros\" } } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"bonjour Stavros!\" }","title":"Custom Operators"},{"location":"custom-operators/#custom-operators","text":"If the out-of-the-box operators don\u2019t meet your needs, you can create your own.","title":"Custom Operators"},{"location":"custom-operators/#setup","text":"mgenerate4j uses compile-time annotation processing so you will need to enable this: Maven <build> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-compiler-plugin </artifactId> <configuration> <annotationProcessorPaths> <path> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-apt </artifactId> <version> 0.0.5 </version> </path> </annotationProcessorPaths> </configuration> </plugin> </plugins> </build> Gradle dependencies { annotationProcessor 'uk.dioxic.mgenerate:mgenerate-apt:0.0.5' compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.5' } Gradle KT dependencies { annotationProcessor ( \"uk.dioxic.mgenerate:mgenerate-apt:0.0.5\" ) compile ( \"uk.dioxic.mgenerate:mgenerate-core:0.0.5\" ) }","title":"Setup"},{"location":"custom-operators/#basics","text":"Creating a new operator is easy, in 3 simple steps: Create a new class Implement the Resolvable interface or extend the AbstractOperator class Annotate with @Operator @Operator public class Hello extends AbstractOperator < String > { @Override public String resolveInternal () { return \"hello world!\" ; } } The annotation processor will automatically create a builder class for your operator at compile-time in the same package. You then add the builder to the OperatorFactory by either giving it the builder class or it\u2019s package. public class Main { static { // add single operator builder OperatorFactory . addBuilder ( HelloBuilder . class ); // add all operator builders under this package signature OperatorFactory . addBuilder ( \"com.example\" ); } } Your custom operator can then be used just like any other operator. Template { \"greeting\" : \"$hello\" } Output { \"greeting\" : \"hello world!\" }","title":"Basics"},{"location":"custom-operators/#aliasing","text":"By default, the operator name will be the same as the lower-case class name but it can be given one or more aliases by specifying the value attribute on the @Operator annotation. @Operator ({ \"greet\" , \"sayhello\" }) public class Hello extends AbstractOperator < String > { @Override public String resolveInternal () { return \"hello world!\" ; } } Template { \"greeting\" : \"$hello\" , \"greeting2\" : \"$greeting\" , \"greeting3\" : \"$sayhello\" } Output { \"greeting\" : \"hello world!\" , \"greeting2\" : \"hello world!\" , \"greeting3\" : \"hello world!\" }","title":"Aliasing"},{"location":"custom-operators/#arguments","text":"If you want to pass arguments into your operator you can annotation either a class-level variable or method with the @OperatorProperty annotation. These will need to be either package-protected or public. If the property is required, set the required attribute on the annotation. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty ( required = true ) String name ; @Override public String resolveInternal () { return \"hello \" + name + \"!\" ; } } Template { \"greeting\" : { \"$greet\" : \"Bob\" } } Output { \"greeting\" : \"hello Bob!\" } ```","title":"Arguments"},{"location":"custom-operators/#dynamic-arguments","text":"We can pass another operator into our customGreeting property and this will work fine, however, in this mode, the input operator will be hydrated only once. So, every document generated will have the same value. Template { \"greeting\" : { \"$greet\" : \"$first\" } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Bob!\" } If we want the input operator to be resolved separately for every generated document then we need the input variable to be a Resolvable type and resolve it in our resolveInternal method. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty ( required = true ) Resolvable < String > name ; @Override public String resolveInternal () { return \"hello \" + name . resolve () + \"!\" ; } } Template { \"greeting\" : { \"$greet\" : \"$first\" } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"hello Mike!\" } { \"greeting\" : \"hello Stavros!\" }","title":"Dynamic Arguments"},{"location":"custom-operators/#default-values","text":"We can set defaults for our operator properties. If we are using Resolvable types then we need to wrap them using the Wrapper helper. @Operator public class Greet extends AbstractOperator < String > { @OperatorProperty String greeting = \"hello\" ; @OperatorProperty Resolvable < String > name = Wrapper . wrap ( \"Bob\" ); @Override public String resolveInternal () { return greeting + \" \" + name . resolve () + \"!\" ; } } Template { \"greeting\" : \"$greet\" { \"greeting\" : { \"$greet\" : { \"greeting\" : \"bonjour\" , \"name\" : \"Stavros\" } } } Output { \"greeting\" : \"hello Bob!\" } { \"greeting\" : \"bonjour Stavros!\" }","title":"Default Values"},{"location":"operator-reference/","text":"Operator Reference \u00b6 This is a full list of all the out-of-the-box operators. If you want to create your own operator, check out the Custom Operators page. General \u00b6 $array : Creates an array of values. $avg : Calculates the average of the input array elements. $bin : Creates random binary data of a specified size. $boolean : Creates a random boolean value. $concat : Merges multiple arrays into a single array. $choose : Chooses one element from an array of possible choices. $distinct : Returns the distinct set of the input array. $hash : Returns the hash of the input. $inc : Increments the input value. $join : Joins elements of an array to a string. $max : Returns the max value from an array of elements. $min : Returns the min value from an array of elements. $mod : Returns the modulus of the input. $objectId : Returns a new ObjectId. $optional : A wrapper to optionally include/exclude the value. $pick : Returns an element from an array. $pickset : Returns a subset of an array. $regex : Returns a Regular Expression object. $uuid : Generates a random UUID. Sequence \u00b6 $dateSequence : Returns a sequence of dates. $intSequence : Returns a sequence of 32-bit integers. $longSequence : Returns a sequence of 64-bit integers. Numeric \u00b6 $decimal : Returns a random Decimal 128. $floating : Returns a random floating point. $int : Returns a random 32-bit integer. $long : Returns a random 64-bit integer. Time / Date \u00b6 $dt : Returns a random date, optionally in a given range. $now : Returns the current date. $dayOfMonth : Day of month of input date. $dayOfWeek : Day of week of input date. $dayOfYear : Day of year of input date. $epoch : Epoch of input date. $hour : Hour of input date. $minute : Minute of input date. $month : Month of input date. $second : Second of input date. $ts : Creates a random BSON timestamp. $year : Year of input date. Text \u00b6 $character : Returns a random character from a pool of characters. $paragraph : Returns a random paragraph. $sentence : Returns a random sentence. $string : Returns a string of a defined length. $word : Returns a random word. Geospatial \u00b6 $coordinates : Returns a pair of longitude/latitude coordinates. $point : Returns a GeoJSON Point. $lineString : Returns a GeoJSON LineString. $polygon : Returns a GeoJSON Polygon. Internet \u00b6 $domain : Returns a random www domain name. $email : Returns a random email address. $ip : Generates a random IPv4 address. $ipv6 : Generates a random IPv6 address. $macAdress : Generates a random MAC address. $url : Generates a random URL. $username : Generates a random username. Location \u00b6 $city : Generates a random city. $country : Generates a random country. $phone : Generates a random phone number. $postal : Generates a random post code. $state : Generates a random state. $street : Generates a random street. $zip : Generates a random zip code. Person \u00b6 $age : Generates a random age. $birthday : Generates a random birthday. $first : Generates a random first name. $gender : Generates a random gender. $last : Generates a random last name. $maritalStatus : Generates a random marital status. $name : Generates a name. $prefix : Generates a random salutation. $ssn : Generates a random social security number. $suffix : Generates a random title (e.g. esq.).","title":"Operator Reference"},{"location":"operator-reference/#operator-reference","text":"This is a full list of all the out-of-the-box operators. If you want to create your own operator, check out the Custom Operators page.","title":"Operator Reference"},{"location":"operator-reference/#general","text":"$array : Creates an array of values. $avg : Calculates the average of the input array elements. $bin : Creates random binary data of a specified size. $boolean : Creates a random boolean value. $concat : Merges multiple arrays into a single array. $choose : Chooses one element from an array of possible choices. $distinct : Returns the distinct set of the input array. $hash : Returns the hash of the input. $inc : Increments the input value. $join : Joins elements of an array to a string. $max : Returns the max value from an array of elements. $min : Returns the min value from an array of elements. $mod : Returns the modulus of the input. $objectId : Returns a new ObjectId. $optional : A wrapper to optionally include/exclude the value. $pick : Returns an element from an array. $pickset : Returns a subset of an array. $regex : Returns a Regular Expression object. $uuid : Generates a random UUID.","title":"General"},{"location":"operator-reference/#sequence","text":"$dateSequence : Returns a sequence of dates. $intSequence : Returns a sequence of 32-bit integers. $longSequence : Returns a sequence of 64-bit integers.","title":"Sequence"},{"location":"operator-reference/#numeric","text":"$decimal : Returns a random Decimal 128. $floating : Returns a random floating point. $int : Returns a random 32-bit integer. $long : Returns a random 64-bit integer.","title":"Numeric"},{"location":"operator-reference/#time-date","text":"$dt : Returns a random date, optionally in a given range. $now : Returns the current date. $dayOfMonth : Day of month of input date. $dayOfWeek : Day of week of input date. $dayOfYear : Day of year of input date. $epoch : Epoch of input date. $hour : Hour of input date. $minute : Minute of input date. $month : Month of input date. $second : Second of input date. $ts : Creates a random BSON timestamp. $year : Year of input date.","title":"Time / Date"},{"location":"operator-reference/#text","text":"$character : Returns a random character from a pool of characters. $paragraph : Returns a random paragraph. $sentence : Returns a random sentence. $string : Returns a string of a defined length. $word : Returns a random word.","title":"Text"},{"location":"operator-reference/#geospatial","text":"$coordinates : Returns a pair of longitude/latitude coordinates. $point : Returns a GeoJSON Point. $lineString : Returns a GeoJSON LineString. $polygon : Returns a GeoJSON Polygon.","title":"Geospatial"},{"location":"operator-reference/#internet","text":"$domain : Returns a random www domain name. $email : Returns a random email address. $ip : Generates a random IPv4 address. $ipv6 : Generates a random IPv6 address. $macAdress : Generates a random MAC address. $url : Generates a random URL. $username : Generates a random username.","title":"Internet"},{"location":"operator-reference/#location","text":"$city : Generates a random city. $country : Generates a random country. $phone : Generates a random phone number. $postal : Generates a random post code. $state : Generates a random state. $street : Generates a random street. $zip : Generates a random zip code.","title":"Location"},{"location":"operator-reference/#person","text":"$age : Generates a random age. $birthday : Generates a random birthday. $first : Generates a random first name. $gender : Generates a random gender. $last : Generates a random last name. $maritalStatus : Generates a random marital status. $name : Generates a name. $prefix : Generates a random salutation. $ssn : Generates a random social security number. $suffix : Generates a random title (e.g. esq.).","title":"Person"},{"location":"operators/","text":"Operators \u00b6 Operators are functions which generate particular data. They are denoted by a $ prefix and can be used in various formats. Operators can have input arguments that allow modification of their output. Sometimes these are mandatory, sometimes default values exist. When they exist, default values are vaguely sensible. Syntax \u00b6 If an operator has no required arguments, or the required arguments have default values, then the simple string format can be used: { \"key\" : \"$operator\" } When there is an argument marked as primary or only a single required argument then the short object format can be used: { \"key\" : { \"$operator\" : 123 } } If multiple arguments need to be specified the long object format is used: { \"key\" : { \"$operator\" : { \"argument1\" : 123 , \"argument2\" : \"xyz\" } } } Chaining \u00b6 An operator can be passed as an argument to another operator allowing multiple operators to be chained together. Here we pass in a random number between 0 and 5 to the number option of the $array operator to generate variable-length arrays. Template { \"names\" : { \"$array\" : { \"of\" : \"$first\" , \"number\" : { \"$integer\" : { \"min\" : 0 , \"max\" : 5 } } } } } Output { \"name\" : [ \"Tina\" ] } { \"name\" : [ \"Tito\" , \"Andre\" , \"Telly\" , \"Stavros\" ] } { \"name\" : [ \"Bob\" ] } { \"name\" : [] } { \"name\" : [ \"Andre\" , \"Monserrate\" , \"Earl\" ] } Optionality \u00b6 All out-of-the-box operators support optionality by overriding the isNull option and providing either a boolean value or a probability between 0 and 1. If this resolves to true, the operator is excluded from the result. Custom operators will also exhibit this behaviour if they extend the AbstractOperator class. There is also an $optional operator to support optionality for constant values. Template { \"nullValue1\" : { \"$number\" : { \"isNull\" : true } } } { \"nullValue2\" : { \"$first\" : { \"isNull\" : 1 } } } { \"optionalValue\" : { \"$first\" : { \"isNull\" : 0.5 } } } { \"includedValue1\" : { \"$first\" : { \"isNull\" : 0 } } } { \"includedValue2\" : { \"$number\" : { \"isNull\" : false } } } Output { } { } { \"optionalValue\" : \"Bob\" } { \"includedValue1\" : \"Alice\" } { \"includedValue2\" : 2399829 }","title":"Operators"},{"location":"operators/#operators","text":"Operators are functions which generate particular data. They are denoted by a $ prefix and can be used in various formats. Operators can have input arguments that allow modification of their output. Sometimes these are mandatory, sometimes default values exist. When they exist, default values are vaguely sensible.","title":"Operators"},{"location":"operators/#syntax","text":"If an operator has no required arguments, or the required arguments have default values, then the simple string format can be used: { \"key\" : \"$operator\" } When there is an argument marked as primary or only a single required argument then the short object format can be used: { \"key\" : { \"$operator\" : 123 } } If multiple arguments need to be specified the long object format is used: { \"key\" : { \"$operator\" : { \"argument1\" : 123 , \"argument2\" : \"xyz\" } } }","title":"Syntax"},{"location":"operators/#chaining","text":"An operator can be passed as an argument to another operator allowing multiple operators to be chained together. Here we pass in a random number between 0 and 5 to the number option of the $array operator to generate variable-length arrays. Template { \"names\" : { \"$array\" : { \"of\" : \"$first\" , \"number\" : { \"$integer\" : { \"min\" : 0 , \"max\" : 5 } } } } } Output { \"name\" : [ \"Tina\" ] } { \"name\" : [ \"Tito\" , \"Andre\" , \"Telly\" , \"Stavros\" ] } { \"name\" : [ \"Bob\" ] } { \"name\" : [] } { \"name\" : [ \"Andre\" , \"Monserrate\" , \"Earl\" ] }","title":"Chaining"},{"location":"operators/#optionality","text":"All out-of-the-box operators support optionality by overriding the isNull option and providing either a boolean value or a probability between 0 and 1. If this resolves to true, the operator is excluded from the result. Custom operators will also exhibit this behaviour if they extend the AbstractOperator class. There is also an $optional operator to support optionality for constant values. Template { \"nullValue1\" : { \"$number\" : { \"isNull\" : true } } } { \"nullValue2\" : { \"$first\" : { \"isNull\" : 1 } } } { \"optionalValue\" : { \"$first\" : { \"isNull\" : 0.5 } } } { \"includedValue1\" : { \"$first\" : { \"isNull\" : 0 } } } { \"includedValue2\" : { \"$number\" : { \"isNull\" : false } } } Output { } { } { \"optionalValue\" : \"Bob\" } { \"includedValue1\" : \"Alice\" } { \"includedValue2\" : 2399829 }","title":"Optionality"},{"location":"placeholders/","text":"Placeholders \u00b6 There are two types of placeholder; document placeholders and faker placeholders. Document placeholders are used when we want to refer to a value in the generated document. Faker placeholders are used when we want to refer to a faker key that is not directly exposed by an operator or when we want to combine multiple faker keys together. Document Placeholders \u00b6 The basic syntax for document placeholders is ${ <document key> } . Template { \"firstName\" : \"$first\" , \"lastName\" : \"$last\" , \"fullName\" : \"${firstName} ${lastName}\" } Output { \"firstName\" : \"Jacques\" , \"lastName\" : \"Strap\" , \"fullName\" : \"Jacques Strap\" } Emdedded Fields \u00b6 Dot-notation is supported in document placeholders so, we can reference embedded fields: Template { \"person\" : { \"name\" : \"$first\" , \"age\" : 26 }, \"repeatName\" : \"${person.name}\" } Output { \"person\" : { \"name\" : \"John\" , \"age\" : 26 }, \"repeatName\" : \"John\" } Arrays \u00b6 Dot-notation is also supported for referencing array elements by their index. Note: Arrays are zero-indexed in mgenerate Template { \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" , \"Mackenzie\" , \"Bob\" ], \"element0\" : \"${names.0}\" , \"element2\" : \"${names.2}\" } Output { \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" , \"Mackenzie\" , \"Bob\" ], \"element0\" : \"Shaina\" , \"element2\" : \"Maximilian\" } If the placeholder refers to a field which exists more than once, an array will be returned: Template { \"people\" : [ { \"name\" : \"Shaina\" }, { \"name\" : \"Callie\" }, { \"name\" : \"Maximilian\" } ], \"names\" : \"${people.name}\" } Output { \"people\" : [ { \"name\" : \"Shaina\" }, { \"name\" : \"Callie\" }, { \"name\" : \"Maximilian\" } ], \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" ] } N-depth nesting with mixed array and document references will also work: Template { \"people\" : [ { \"name\" : \"Shaina\" , \"addresses\" : [ { \"city\" : \"$city\" }, { \"city\" : \"$city\" } ] }, { \"name\" : \"Callie\" , \"addresses\" : { \"city\" : \"$city\" } }, { \"name\" : \"Maximilian\" } ], \"cities\" : \"${people.addresses.city}\" } Output { \"people\" : [ { \"name\" : \"Shaina\" , \"addresses\" : [ { \"city\" : \"London\" }, { \"city\" : \"Cardiff\" } ] }, { \"name\" : \"Callie\" , \"addresses\" : { \"city\" : \"New York\" } }, { \"name\" : \"Maximilian\" } ], \"cities\" : [ \"London\" , \"Cardiff\" , \"New York\" ] } And, of course, document placeholders can be passed to an operator. Template { \"scores\" : [ { \"type\" : \"homework\" , \"score\" : 54 }, { \"type\" : \"exam\" , \"score\" : 99 }, { \"type\" : \"coursework\" , \"score\" : 13 } ], \"topScore\" : { \"$max\" : \"${scores.score}\" } } Output { \"scores\" : [ { \"type\" : \"homework\" , \"score\" : 54 }, { \"type\" : \"exam\" , \"score\" : 99 }, { \"type\" : \"coursework\" , \"score\" : 13 } ], \"topScore\" : 99 } Faker Placeholders \u00b6 The syntax for document placeholders is #{ <faker key> } . Faker keys can be found in the faker library resources . Template { \"email\" : \"#{name.first_name}.#{name.last_name}@github.com\" } Output { \"email\" : \"Seymour.Butz@github.com\" }","title":"Placeholders"},{"location":"placeholders/#placeholders","text":"There are two types of placeholder; document placeholders and faker placeholders. Document placeholders are used when we want to refer to a value in the generated document. Faker placeholders are used when we want to refer to a faker key that is not directly exposed by an operator or when we want to combine multiple faker keys together.","title":"Placeholders"},{"location":"placeholders/#document-placeholders","text":"The basic syntax for document placeholders is ${ <document key> } . Template { \"firstName\" : \"$first\" , \"lastName\" : \"$last\" , \"fullName\" : \"${firstName} ${lastName}\" } Output { \"firstName\" : \"Jacques\" , \"lastName\" : \"Strap\" , \"fullName\" : \"Jacques Strap\" }","title":"Document Placeholders"},{"location":"placeholders/#emdedded-fields","text":"Dot-notation is supported in document placeholders so, we can reference embedded fields: Template { \"person\" : { \"name\" : \"$first\" , \"age\" : 26 }, \"repeatName\" : \"${person.name}\" } Output { \"person\" : { \"name\" : \"John\" , \"age\" : 26 }, \"repeatName\" : \"John\" }","title":"Emdedded Fields"},{"location":"placeholders/#arrays","text":"Dot-notation is also supported for referencing array elements by their index. Note: Arrays are zero-indexed in mgenerate Template { \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" , \"Mackenzie\" , \"Bob\" ], \"element0\" : \"${names.0}\" , \"element2\" : \"${names.2}\" } Output { \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" , \"Mackenzie\" , \"Bob\" ], \"element0\" : \"Shaina\" , \"element2\" : \"Maximilian\" } If the placeholder refers to a field which exists more than once, an array will be returned: Template { \"people\" : [ { \"name\" : \"Shaina\" }, { \"name\" : \"Callie\" }, { \"name\" : \"Maximilian\" } ], \"names\" : \"${people.name}\" } Output { \"people\" : [ { \"name\" : \"Shaina\" }, { \"name\" : \"Callie\" }, { \"name\" : \"Maximilian\" } ], \"names\" : [ \"Shaina\" , \"Callie\" , \"Maximilian\" ] } N-depth nesting with mixed array and document references will also work: Template { \"people\" : [ { \"name\" : \"Shaina\" , \"addresses\" : [ { \"city\" : \"$city\" }, { \"city\" : \"$city\" } ] }, { \"name\" : \"Callie\" , \"addresses\" : { \"city\" : \"$city\" } }, { \"name\" : \"Maximilian\" } ], \"cities\" : \"${people.addresses.city}\" } Output { \"people\" : [ { \"name\" : \"Shaina\" , \"addresses\" : [ { \"city\" : \"London\" }, { \"city\" : \"Cardiff\" } ] }, { \"name\" : \"Callie\" , \"addresses\" : { \"city\" : \"New York\" } }, { \"name\" : \"Maximilian\" } ], \"cities\" : [ \"London\" , \"Cardiff\" , \"New York\" ] } And, of course, document placeholders can be passed to an operator. Template { \"scores\" : [ { \"type\" : \"homework\" , \"score\" : 54 }, { \"type\" : \"exam\" , \"score\" : 99 }, { \"type\" : \"coursework\" , \"score\" : 13 } ], \"topScore\" : { \"$max\" : \"${scores.score}\" } } Output { \"scores\" : [ { \"type\" : \"homework\" , \"score\" : 54 }, { \"type\" : \"exam\" , \"score\" : 99 }, { \"type\" : \"coursework\" , \"score\" : 13 } ], \"topScore\" : 99 }","title":"Arrays"},{"location":"placeholders/#faker-placeholders","text":"The syntax for document placeholders is #{ <faker key> } . Faker keys can be found in the faker library resources . Template { \"email\" : \"#{name.first_name}.#{name.last_name}@github.com\" } Output { \"email\" : \"Seymour.Butz@github.com\" }","title":"Faker Placeholders"},{"location":"quickstart/","text":"Quickstart \u00b6 Assuming git is installed: $ git clone https://github.com/dioxic/mgenerate4j.git $ ./gradlew shadowJar $ java -jar mgenerate-cli/build/lib/mgenerate-cli-0.0.7-all.jar template.json To import as a maven dependency: <dependency> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-core </artifactId> <version> 0.0.7 </version> </dependency> To import as a gradle dependency: dependencies { compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.7' } Note: You can download the precompiled executable jar here .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Assuming git is installed: $ git clone https://github.com/dioxic/mgenerate4j.git $ ./gradlew shadowJar $ java -jar mgenerate-cli/build/lib/mgenerate-cli-0.0.7-all.jar template.json To import as a maven dependency: <dependency> <groupId> uk.dioxic.mgenerate </groupId> <artifactId> mgenerate-core </artifactId> <version> 0.0.7 </version> </dependency> To import as a gradle dependency: dependencies { compile 'uk.dioxic.mgenerate:mgenerate-core:0.0.7' } Note: You can download the precompiled executable jar here .","title":"Quickstart"},{"location":"usage/","text":"Usage \u00b6 Standalone \u00b6 Usage: cli [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: generate Generate data and output to a file or stdout load Load data directly into MongoDB update Update data in MongoDB delete Delete data in MongoDB sample Sample data in MongoDB java -jar mgenerate.jar load template.json Library \u00b6 MongoClientSettings mcs = MongoClientSettings . builder () . codecRegistry ( CodecRegistries . fromRegistries ( CodecRegistries . fromCodecs ( new TemplateCodec ()), MgenDocumentCodec . getCodecRegistry ())) . build (); MongoCollection < Template > collection = MongoClients . create ( mcs ) . getDatabase ( \"test\" ) . getCollection ( \"mgen\" , Template . class ); Template template = Template . from ( \"c:\\\\tmp\\\\mongo.json\" ); collection . insertOne ( template ); collection . insertOne ( template ); collection . insertOne ( template ); This will result in 3 different documents being inserted as template resolution is performed during encoding.","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#standalone","text":"Usage: cli [OPTIONS] COMMAND [ARGS]... Options: -h, --help Show this message and exit Commands: generate Generate data and output to a file or stdout load Load data directly into MongoDB update Update data in MongoDB delete Delete data in MongoDB sample Sample data in MongoDB java -jar mgenerate.jar load template.json","title":"Standalone"},{"location":"usage/#library","text":"MongoClientSettings mcs = MongoClientSettings . builder () . codecRegistry ( CodecRegistries . fromRegistries ( CodecRegistries . fromCodecs ( new TemplateCodec ()), MgenDocumentCodec . getCodecRegistry ())) . build (); MongoCollection < Template > collection = MongoClients . create ( mcs ) . getDatabase ( \"test\" ) . getCollection ( \"mgen\" , Template . class ); Template template = Template . from ( \"c:\\\\tmp\\\\mongo.json\" ); collection . insertOne ( template ); collection . insertOne ( template ); collection . insertOne ( template ); This will result in 3 different documents being inserted as template resolution is performed during encoding.","title":"Library"},{"location":"operators/%24age/","text":"Returns a sensible age for a human. Options \u00b6 type (optional) Demographic. One of ( CHILD , TEEN , ADULT , SENIOR , DEFAULT ). Example \u00b6 Template { \"age\" : { \"$age\" : \"ADULT\" } } Output { \"age\" : 43 }","title":"$age"},{"location":"operators/%24age/#options","text":"type (optional) Demographic. One of ( CHILD , TEEN , ADULT , SENIOR , DEFAULT ).","title":"Options"},{"location":"operators/%24age/#example","text":"Template { \"age\" : { \"$age\" : \"ADULT\" } } Output { \"age\" : 43 }","title":"Example"},{"location":"operators/%24array/","text":"$Array \u00b6 Creates an array of values. Each element is evaluated separately. Options \u00b6 of (required) Defines an element of the array. number (optional) Number of elements. Default 5 . Example \u00b6 Template { \"countries\" : { \"$array\" : { \"of\" : \"$country\" }, \"number\" : 3 } } Output { \"countries\" : [ \"Czech Republic\" , \"Ireland\" , \"Argentina\" ] }","title":"$Array"},{"location":"operators/%24array/#array","text":"Creates an array of values. Each element is evaluated separately.","title":"$Array"},{"location":"operators/%24array/#options","text":"of (required) Defines an element of the array. number (optional) Number of elements. Default 5 .","title":"Options"},{"location":"operators/%24array/#example","text":"Template { \"countries\" : { \"$array\" : { \"of\" : \"$country\" }, \"number\" : 3 } } Output { \"countries\" : [ \"Czech Republic\" , \"Ireland\" , \"Argentina\" ] }","title":"Example"},{"location":"operators/%24avg/","text":"Computes an average from an array of elements. Example \u00b6 Template { \"average\" : { \"$avg\" : [ 1 , 2 , 3 , 4 , 5 ] } } Output { \"average\" : 3.0 }","title":"$avg"},{"location":"operators/%24avg/#example","text":"Template { \"average\" : { \"$avg\" : [ 1 , 2 , 3 , 4 , 5 ] } } Output { \"average\" : 3.0 }","title":"Example"},{"location":"operators/%24bin/","text":"Creates random binary data of a specified size (in bytes) Options \u00b6 size (optional) Number of bytes to generate (Default: 1024 ). subtype (optional) Binary subtype value: BINARY , FUNCTION , OLD_BINARY , UUID_LEGACY , UUID_STANDARD , MD5 , USER_DEFINED . (Default: BINARY ). Example \u00b6 Template { \"binary\" : { \"$bin\" : 10 } } Output { \"binary\" : { \"$binary\" : { \"base64\" : \"el2mrgjnZcbMlQ==\" , \"subType\" : \"00\" } } }","title":"$bin"},{"location":"operators/%24bin/#options","text":"size (optional) Number of bytes to generate (Default: 1024 ). subtype (optional) Binary subtype value: BINARY , FUNCTION , OLD_BINARY , UUID_LEGACY , UUID_STANDARD , MD5 , USER_DEFINED . (Default: BINARY ).","title":"Options"},{"location":"operators/%24bin/#example","text":"Template { \"binary\" : { \"$bin\" : 10 } } Output { \"binary\" : { \"$binary\" : { \"base64\" : \"el2mrgjnZcbMlQ==\" , \"subType\" : \"00\" } } }","title":"Example"},{"location":"operators/%24birthday/","text":"Returns a sensible birthday for a human. Options \u00b6 type (optional) Demographic. One of ( CHILD , TEEN , ADULT , SENIOR , DEFAULT ). Example \u00b6 Template { \"birthday\" : { \"$birthday\" : \"ADULT\" } } Output { \"birthday\" : ISODate( \"1985-08-15T22:21:35.343Z\" ) }","title":"$birthday"},{"location":"operators/%24birthday/#options","text":"type (optional) Demographic. One of ( CHILD , TEEN , ADULT , SENIOR , DEFAULT ).","title":"Options"},{"location":"operators/%24birthday/#example","text":"Template { \"birthday\" : { \"$birthday\" : \"ADULT\" } } Output { \"birthday\" : ISODate( \"1985-08-15T22:21:35.343Z\" ) }","title":"Example"},{"location":"operators/%24boolean/","text":"Creates a random boolean value. Aliases: $boolean , $bool Example \u00b6 Template { \"value\" : \"$boolean\" } Output { \"value\" : true }","title":"$boolean"},{"location":"operators/%24boolean/#example","text":"Template { \"value\" : \"$boolean\" } Output { \"value\" : true }","title":"Example"},{"location":"operators/%24character/","text":"Returns a random character. If no arguments are set, the pool defaults to all alpha, numeric and some symbols. Options \u00b6 pool (optional, primary) Character pool to construct string from. Overrides other arguments. alpha (optional) Include alpha characters in the character pool. Defaults to false . numeric (optional) Include numeric characters in the character pool. Defaults to false . symbols (optional) Include symbols characters in the character pool. Defaults to false . casing (optional) Set the casing of the alpha characters ( UPPER or LOWER ). Default includes both cases. Example \u00b6 Template { \"charAlpha\" : { \"$character\" : { \"alpha\" : true , \"casing\" : \"upper\" } }, \"charFromPool\" : { \"$character\" : \"MONGO\" } } Output { \"charAlpha\" : \"Z\" , \"charFromPool\" : \"M\" }","title":"$character"},{"location":"operators/%24character/#options","text":"pool (optional, primary) Character pool to construct string from. Overrides other arguments. alpha (optional) Include alpha characters in the character pool. Defaults to false . numeric (optional) Include numeric characters in the character pool. Defaults to false . symbols (optional) Include symbols characters in the character pool. Defaults to false . casing (optional) Set the casing of the alpha characters ( UPPER or LOWER ). Default includes both cases.","title":"Options"},{"location":"operators/%24character/#example","text":"Template { \"charAlpha\" : { \"$character\" : { \"alpha\" : true , \"casing\" : \"upper\" } }, \"charFromPool\" : { \"$character\" : \"MONGO\" } } Output { \"charAlpha\" : \"Z\" , \"charFromPool\" : \"M\" }","title":"Example"},{"location":"operators/%24choose/","text":"Chooses one element from an array of possible choices with uniform probability. Optionally chooses with probability proportional to a provided weights array. Options \u00b6 from (required) Array of values or operators to choose from. weights (optional) Array of weightings (must be the same length as from ). Example \u00b6 Template { \"status\" : { \"$choose\" : { \"from\" : [ \"read\" , \"unread\" , \"deleted\" ], \"weights\" : [ 2 , 1 , 1 ] } } } Output Probability 50% { \"status\" : \"read\" } Output Probability 25% { \"status\" : \"unread\" } Output Probability 25% { \"status\" : \"deleted\" }","title":"$choose"},{"location":"operators/%24choose/#options","text":"from (required) Array of values or operators to choose from. weights (optional) Array of weightings (must be the same length as from ).","title":"Options"},{"location":"operators/%24choose/#example","text":"Template { \"status\" : { \"$choose\" : { \"from\" : [ \"read\" , \"unread\" , \"deleted\" ], \"weights\" : [ 2 , 1 , 1 ] } } } Output Probability 50% { \"status\" : \"read\" } Output Probability 25% { \"status\" : \"unread\" } Output Probability 25% { \"status\" : \"deleted\" }","title":"Example"},{"location":"operators/%24concat/","text":"Combines the elements of the input array into a single array. Options \u00b6 values (required) Array of values to be joined, the elements can be arrays themselves. Example \u00b6 Template { \"fish\" : [ \"plaice\" , \"haddock\" , \"halibut\" ], \"birds\" : [ \"duck\" , \"pigeon\" ], \"merged\" : { \"$concat\" : [ \"${fish}\" , \"${birds}\" , [ \"badger\" , \"turtle\" ], \"$number\" ] } } Output { \"fish\" : [ \"plaice\" , \"haddock\" , \"halibut\" ], \"birds\" : [ \"duck\" , \"pigeon\" ], \"merged\" : [ \"plaice\" , \"haddock\" , \"halibut\" , \"duck\" , \"pigeon\" , \"badger\" , \"turtle\" , 345633 ] }","title":"$concat"},{"location":"operators/%24concat/#options","text":"values (required) Array of values to be joined, the elements can be arrays themselves.","title":"Options"},{"location":"operators/%24concat/#example","text":"Template { \"fish\" : [ \"plaice\" , \"haddock\" , \"halibut\" ], \"birds\" : [ \"duck\" , \"pigeon\" ], \"merged\" : { \"$concat\" : [ \"${fish}\" , \"${birds}\" , [ \"badger\" , \"turtle\" ], \"$number\" ] } } Output { \"fish\" : [ \"plaice\" , \"haddock\" , \"halibut\" ], \"birds\" : [ \"duck\" , \"pigeon\" ], \"merged\" : [ \"plaice\" , \"haddock\" , \"halibut\" , \"duck\" , \"pigeon\" , \"badger\" , \"turtle\" , 345633 ] }","title":"Example"},{"location":"operators/%24coordinates/","text":"Returns a 2-element array of longitude/latitude coordinates, optionally within longBounds and/or latBounds bounds. Aliases: $coord , $coordinates Options \u00b6 longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . Example \u00b6 Template { \"position\" : { \"$coordinates\" : { \"longBounds\" : [ -20 , -19 ] } } } Output { \"position\" : [ -19.96851 , -47.46141 ] }","title":"$coordinates"},{"location":"operators/%24coordinates/#options","text":"longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] .","title":"Options"},{"location":"operators/%24coordinates/#example","text":"Template { \"position\" : { \"$coordinates\" : { \"longBounds\" : [ -20 , -19 ] } } } Output { \"position\" : [ -19.96851 , -47.46141 ] }","title":"Example"},{"location":"operators/%24country/","text":"Returns a random country (or country code). Options \u00b6 code (optional) Return just the country code. Default false . Example \u00b6 Template { \"country\" : { \"$country\" : false } } Output { \"country\" : \"Paraguay\" }","title":"$country"},{"location":"operators/%24country/#options","text":"code (optional) Return just the country code. Default false .","title":"Options"},{"location":"operators/%24country/#example","text":"Template { \"country\" : { \"$country\" : false } } Output { \"country\" : \"Paraguay\" }","title":"Example"},{"location":"operators/%24dateSequence/","text":"Returns a sequence of dates from an initial start date. Aliases: $dateSeq , $dateSequence Options \u00b6 start (optional) Start date. Default NOW . step (optional) The step increment. Default 1 . chronoUnit (optional) The chonological unit to increment by ( YEARS , MONTHS , WEEKS , DAYS , HOURS , SECONDS , MILLIS ) Example \u00b6 Template { \"seq\" : { \"$dateSeq\" : { \"start\" : \"2020-01-01\" , \"chronoUnit\" : \"MINUTES\" , \"step\" : 2 } } } Output { \"seq\" : { \"$date\" : \"2020-01-01T00:00:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:02:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:04:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:06:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:08:00Z\" } } ...","title":"$dateSequence"},{"location":"operators/%24dateSequence/#options","text":"start (optional) Start date. Default NOW . step (optional) The step increment. Default 1 . chronoUnit (optional) The chonological unit to increment by ( YEARS , MONTHS , WEEKS , DAYS , HOURS , SECONDS , MILLIS )","title":"Options"},{"location":"operators/%24dateSequence/#example","text":"Template { \"seq\" : { \"$dateSeq\" : { \"start\" : \"2020-01-01\" , \"chronoUnit\" : \"MINUTES\" , \"step\" : 2 } } } Output { \"seq\" : { \"$date\" : \"2020-01-01T00:00:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:02:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:04:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:06:00Z\" } } { \"seq\" : { \"$date\" : \"2020-01-01T00:08:00Z\" } } ...","title":"Example"},{"location":"operators/%24dayOfMonth/","text":"Returns the day of the month from the input date. Options \u00b6 date (required) Input date. Example \u00b6 Template { \"someDate\" : \"$dt\" , \"dayOfMonth\" : { \"$dayOfMonth\" : \"${someDate}\" } } Output { \"someDate\" : { \"$date\" : \"2016-06-28T15:28:54.721Z\" } , \"dayOfMonth\" : 28 }","title":"$dayOfMonth"},{"location":"operators/%24dayOfMonth/#options","text":"date (required) Input date.","title":"Options"},{"location":"operators/%24dayOfMonth/#example","text":"Template { \"someDate\" : \"$dt\" , \"dayOfMonth\" : { \"$dayOfMonth\" : \"${someDate}\" } } Output { \"someDate\" : { \"$date\" : \"2016-06-28T15:28:54.721Z\" } , \"dayOfMonth\" : 28 }","title":"Example"},{"location":"operators/%24dayOfWeek/","text":"Returns the day of the week from the input date. Options \u00b6 date (required) Input date. type (optional) The output display type ( NUMERIC , LONG_TEXT or SHORT_TEXT ). Default NUMERIC . locale (optional) The display locale. Defaults to Locale.getDefault() . Example \u00b6 Template { \"someDate\" : \"$dt\" , \"number\" : { \"$dayOfWeek\" : \"${someDate}\" }, \"text\" : { \"$dayOfWeek\" : { \"date\" : \"${someDate}\" , \"type\" : \"LONG_TEXT\" , \"locale\" : { \"language\" : \"de\" , \"country\" : \"DE\" } } } } Output { \"someDate\" : { \"$date\" : \"1998-01-05T14:55:17.17Z\" }, \"number\" : 1 , \"text\" : \"Montag\" }","title":"$dayOfWeek"},{"location":"operators/%24dayOfWeek/#options","text":"date (required) Input date. type (optional) The output display type ( NUMERIC , LONG_TEXT or SHORT_TEXT ). Default NUMERIC . locale (optional) The display locale. Defaults to Locale.getDefault() .","title":"Options"},{"location":"operators/%24dayOfWeek/#example","text":"Template { \"someDate\" : \"$dt\" , \"number\" : { \"$dayOfWeek\" : \"${someDate}\" }, \"text\" : { \"$dayOfWeek\" : { \"date\" : \"${someDate}\" , \"type\" : \"LONG_TEXT\" , \"locale\" : { \"language\" : \"de\" , \"country\" : \"DE\" } } } } Output { \"someDate\" : { \"$date\" : \"1998-01-05T14:55:17.17Z\" }, \"number\" : 1 , \"text\" : \"Montag\" }","title":"Example"},{"location":"operators/%24dayOfYear/","text":"Returns the day of the year from the input date. Options \u00b6 date (required) Input date. Example \u00b6 Template { \"someDate\" : \"$dt\" , \"day\" : { \"$dayOfYear\" : \"${someDate}\" } } Output { \"someDate\" : { \"$date\" : \"2006-05-31T07:41:09.474Z\" }, \"day\" : 151 }","title":"$dayOfYear"},{"location":"operators/%24dayOfYear/#options","text":"date (required) Input date.","title":"Options"},{"location":"operators/%24dayOfYear/#example","text":"Template { \"someDate\" : \"$dt\" , \"day\" : { \"$dayOfYear\" : \"${someDate}\" } } Output { \"someDate\" : { \"$date\" : \"2006-05-31T07:41:09.474Z\" }, \"day\" : 151 }","title":"Example"},{"location":"operators/%24decimal/","text":"Returns a random BSON Decimal128 number. Aliases: $decimal , $decimal128 , $mgNumberDecimal Options \u00b6 min (optional) minimum value. Default 0 . max (optional) maximum value. Default 1000 . fixed (optional) number of digits after the decimal. Default 2 . Example \u00b6 Template { \"price\" : { \"$decimal\" : { \"fixed\" : 3 } } } Extended JSON Output { \"price\" : { \"$numberDecimal\" : \"545.241\" } } Shell Output { \"price\" : NumberDecimal( \"545.241\" ) }","title":"$decimal"},{"location":"operators/%24decimal/#options","text":"min (optional) minimum value. Default 0 . max (optional) maximum value. Default 1000 . fixed (optional) number of digits after the decimal. Default 2 .","title":"Options"},{"location":"operators/%24decimal/#example","text":"Template { \"price\" : { \"$decimal\" : { \"fixed\" : 3 } } } Extended JSON Output { \"price\" : { \"$numberDecimal\" : \"545.241\" } } Shell Output { \"price\" : NumberDecimal( \"545.241\" ) }","title":"Example"},{"location":"operators/%24distinct/","text":"Returns the distinct set of the input array. Options \u00b6 values (required) Input array. Example \u00b6 Template { \"distinct\" : { \"$distinct\" : [ \"badger\" , \"badger\" , \"halibut\" ] } } Output { \"distinct\" : [ \"badger\" , \"halibut\" ] }","title":"$distinct"},{"location":"operators/%24distinct/#options","text":"values (required) Input array.","title":"Options"},{"location":"operators/%24distinct/#example","text":"Template { \"distinct\" : { \"$distinct\" : [ \"badger\" , \"badger\" , \"halibut\" ] } } Output { \"distinct\" : [ \"badger\" , \"halibut\" ] }","title":"Example"},{"location":"operators/%24dt/","text":"Returns a random date object, optionally between specified min and max values. If min and/or max are provided, they need to be in ISO-8601 format. Aliases: $dt , $dateTime , $mgDate Options \u00b6 min (optional) Minimum date. max (optional) Maximum date. Example \u00b6 Template { \"last_login\" : { \"$dt\" : { \"min\" : \"2015-01-01\" , \"max\" : \"2016-12-31T23:59:59.999Z\" } } } Extended JSON Output { \"last_login\" : { \"$date\" : \"2016-06-28T15:28:54.721Z\" } } Shell Output { \"last_login\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) }","title":"$dt"},{"location":"operators/%24dt/#options","text":"min (optional) Minimum date. max (optional) Maximum date.","title":"Options"},{"location":"operators/%24dt/#example","text":"Template { \"last_login\" : { \"$dt\" : { \"min\" : \"2015-01-01\" , \"max\" : \"2016-12-31T23:59:59.999Z\" } } } Extended JSON Output { \"last_login\" : { \"$date\" : \"2016-06-28T15:28:54.721Z\" } } Shell Output { \"last_login\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) }","title":"Example"},{"location":"operators/%24email/","text":"Generates a random email address. Options \u00b6 username (optional) Email prefix. domain (optional) Email domain name. Example \u00b6 Template { \"email\" : { \"$email\" : { \"domain\" : \"gmail.com\" } } } Output { \"email\" : \"emmett.walsh@gmail.com\" }","title":"$email"},{"location":"operators/%24email/#options","text":"username (optional) Email prefix. domain (optional) Email domain name.","title":"Options"},{"location":"operators/%24email/#example","text":"Template { \"email\" : { \"$email\" : { \"domain\" : \"gmail.com\" } } } Output { \"email\" : \"emmett.walsh@gmail.com\" }","title":"Example"},{"location":"operators/%24epoch/","text":"Epoch \u00b6 Returns the year from the input date. Options \u00b6 date (optional) Input date. Defaults to now. unit (optional) ChronoUnit to for epoch (e.g MILLIS , SECONDS , MINUTES ). Defaults to MILLIS . Example \u00b6 Template { \"nowEpoch\" : \"$epoch\" , \"someDate\" : \"$dt\" , \"someEpoch\" : { \"$epoch\" : { \"date\" : \"${someDate}\" , \"unit\" : \"SECONDS\" } } } Output { \"nowEpoch\" : 1569089885601 , \"someDate\" : ISODate( \"1997-02-25T18:30:36.731Z\" ) , \"someEpoch\" : 1569089885 }","title":"Epoch"},{"location":"operators/%24epoch/#epoch","text":"Returns the year from the input date.","title":"Epoch"},{"location":"operators/%24epoch/#options","text":"date (optional) Input date. Defaults to now. unit (optional) ChronoUnit to for epoch (e.g MILLIS , SECONDS , MINUTES ). Defaults to MILLIS .","title":"Options"},{"location":"operators/%24epoch/#example","text":"Template { \"nowEpoch\" : \"$epoch\" , \"someDate\" : \"$dt\" , \"someEpoch\" : { \"$epoch\" : { \"date\" : \"${someDate}\" , \"unit\" : \"SECONDS\" } } } Output { \"nowEpoch\" : 1569089885601 , \"someDate\" : ISODate( \"1997-02-25T18:30:36.731Z\" ) , \"someEpoch\" : 1569089885 }","title":"Example"},{"location":"operators/%24floating/","text":"Returns a random floating point number (64-bit). Aliases: $floating , $float , $double , $mgNumberDouble Options \u00b6 min (optional) minimum value. Default -2^1074 . max (optional) maximum value. Default 2^1023 . Example \u00b6 Template { \"price\" : { \"$double\" : { \"min\" : 100 } } } Output { \"price\" : 7647.42134652 }","title":"$floating"},{"location":"operators/%24floating/#options","text":"min (optional) minimum value. Default -2^1074 . max (optional) maximum value. Default 2^1023 .","title":"Options"},{"location":"operators/%24floating/#example","text":"Template { \"price\" : { \"$double\" : { \"min\" : 100 } } } Output { \"price\" : 7647.42134652 }","title":"Example"},{"location":"operators/%24hash/","text":"Computes a hash of the input value. Options \u00b6 input (required) The value to hash. algorithm (optional) The hash algorithm to use: MD5 , SHA1 , SHA256 , HASHCODE (default: MD5 ). Example \u00b6 Template { \"hash\" : { \"$hash\" : \"abc\" } } Output { \"hash\" : 572197704 }","title":"$hash"},{"location":"operators/%24hash/#options","text":"input (required) The value to hash. algorithm (optional) The hash algorithm to use: MD5 , SHA1 , SHA256 , HASHCODE (default: MD5 ).","title":"Options"},{"location":"operators/%24hash/#example","text":"Template { \"hash\" : { \"$hash\" : \"abc\" } } Output { \"hash\" : 572197704 }","title":"Example"},{"location":"operators/%24hour/","text":"Returns the hour from the input date. Options \u00b6 date (optional) Input date. Default random (0-23). Example \u00b6 Template { \"someDate\" : \"$dt\" , \"hour\" : { \"$hour\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"hour\" : 15 }","title":"$hour"},{"location":"operators/%24hour/#options","text":"date (optional) Input date. Default random (0-23).","title":"Options"},{"location":"operators/%24hour/#example","text":"Template { \"someDate\" : \"$dt\" , \"hour\" : { \"$hour\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"hour\" : 15 }","title":"Example"},{"location":"operators/%24inc/","text":"Increments the input value by the step argument. Aliases: $inc , $increment Options \u00b6 input (required) Input value. Must be numeric. step (optional) Value to increment by. Default 1 . Example \u00b6 Template { \"n\" : \"$number\" , \"nPlus2\" : { \"$inc\" : { \"input\" : \"${n}\" , \"step\" : 2 } } } Output { \"n\" : 100 , \"nPlus2\" : 102 }","title":"$inc"},{"location":"operators/%24inc/#options","text":"input (required) Input value. Must be numeric. step (optional) Value to increment by. Default 1 .","title":"Options"},{"location":"operators/%24inc/#example","text":"Template { \"n\" : \"$number\" , \"nPlus2\" : { \"$inc\" : { \"input\" : \"${n}\" , \"step\" : 2 } } } Output { \"n\" : 100 , \"nPlus2\" : 102 }","title":"Example"},{"location":"operators/%24int/","text":"Returns a random BSON Integer (32-bit) number. Aliases: $integer , $number , $int , $mgNumberInt , $int32 Options \u00b6 min (optional) minimum value. Default -2^31 . max (optional) maximum value. Default 2^31 . Example \u00b6 Template { \"price\" : { \"$int\" : { \"min\" : 100 } } } Output { \"price\" : 7647 }","title":"$int"},{"location":"operators/%24int/#options","text":"min (optional) minimum value. Default -2^31 . max (optional) maximum value. Default 2^31 .","title":"Options"},{"location":"operators/%24int/#example","text":"Template { \"price\" : { \"$int\" : { \"min\" : 100 } } } Output { \"price\" : 7647 }","title":"Example"},{"location":"operators/%24intSequence/","text":"Returns a sequence of 32-bit integers. Aliases: $seq , $intSeq , $sequence , $intSequence Options \u00b6 start (optional) Initial value. Default 0 . step (optional) The step increment. Default 1 . Example \u00b6 Template { \"seq\" : { \"$intSeq\" : { \"step\" : 2 } } } Output { \"seq\" : 0 } { \"seq\" : 2 } { \"seq\" : 4 } { \"seq\" : 6 } { \"seq\" : 8 } ...","title":"$intSequence"},{"location":"operators/%24intSequence/#options","text":"start (optional) Initial value. Default 0 . step (optional) The step increment. Default 1 .","title":"Options"},{"location":"operators/%24intSequence/#example","text":"Template { \"seq\" : { \"$intSeq\" : { \"step\" : 2 } } } Output { \"seq\" : 0 } { \"seq\" : 2 } { \"seq\" : 4 } { \"seq\" : 6 } { \"seq\" : 8 } ...","title":"Example"},{"location":"operators/%24join/","text":"Takes an array array and a separator string sep and joins the elements of the array (each cast to string) separated by sep . Options \u00b6 array (required) Array of values to be joined. sep (optional) Separator string. Default '' (empty string). Example \u00b6 Template { \"code\" : { \"$join\" : { \"array\" : [ \"foo\" , \"bar\" , \"baz\" ], \"sep\" : \"-\" } } } Output { \"code\" : \"foo-bar-baz\" }","title":"$join"},{"location":"operators/%24join/#options","text":"array (required) Array of values to be joined. sep (optional) Separator string. Default '' (empty string).","title":"Options"},{"location":"operators/%24join/#example","text":"Template { \"code\" : { \"$join\" : { \"array\" : [ \"foo\" , \"bar\" , \"baz\" ], \"sep\" : \"-\" } } } Output { \"code\" : \"foo-bar-baz\" }","title":"Example"},{"location":"operators/%24lineString/","text":"Returns a GeoJSON formatted LineString . Options \u00b6 longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . locs (optional) Number of locations in the line string. Default 3 . Example \u00b6 Template { \"line\" : { \"$lineString\" : { \"locs\" : 3 } } } Output { \"line\" : { \"type\" : \"LineString\" , \"coordinates\" : [ [ -5.735021154016692 , -59.374717617075106 ], [ 149.858471917435 , -67.48631323418616 ], [ 36.22877102282027 , -48.52554693407486 ] ] } }","title":"$lineString"},{"location":"operators/%24lineString/#options","text":"longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . locs (optional) Number of locations in the line string. Default 3 .","title":"Options"},{"location":"operators/%24lineString/#example","text":"Template { \"line\" : { \"$lineString\" : { \"locs\" : 3 } } } Output { \"line\" : { \"type\" : \"LineString\" , \"coordinates\" : [ [ -5.735021154016692 , -59.374717617075106 ], [ 149.858471917435 , -67.48631323418616 ], [ 36.22877102282027 , -48.52554693407486 ] ] } }","title":"Example"},{"location":"operators/%24long/","text":"Returns a random BSON Long (64-bit) number. Aliases: $long , $mgNumberLong , $int64 Options \u00b6 min (optional) minimum value. Default -2^53 . max (optional) maximum value. Default 2^53 . Example \u00b6 Template { \"price\" : { \"$long\" : { \"min\" : 10000 } } } Extended JSON Output { \"price\" : { \"$numberLong\" : \"7624790980443125\" } } Shell Output { \"price\" : NumberLong( \"7624790980443125\" ) }","title":"$long"},{"location":"operators/%24long/#options","text":"min (optional) minimum value. Default -2^53 . max (optional) maximum value. Default 2^53 .","title":"Options"},{"location":"operators/%24long/#example","text":"Template { \"price\" : { \"$long\" : { \"min\" : 10000 } } } Extended JSON Output { \"price\" : { \"$numberLong\" : \"7624790980443125\" } } Shell Output { \"price\" : NumberLong( \"7624790980443125\" ) }","title":"Example"},{"location":"operators/%24longSequence/","text":"Returns a sequence of 64-bit integers. Aliases: $longSeq , $longSequence Options \u00b6 start (optional) Initial value. Default 0 . step (optional) The step increment. Default 1 . Example \u00b6 Template { \"seq\" : { \"$longSeq\" : { \"start\" : 2147483647 \"step\" : 2 } } } Extended JSON Output { \"seq\" : { \"$numberLong\" : \"2147483647\" } } { \"seq\" : { \"$numberLong\" : \"2147483649\" } } { \"seq\" : { \"$numberLong\" : \"2147483651\" } } { \"seq\" : { \"$numberLong\" : \"2147483653\" } } { \"seq\" : { \"$numberLong\" : \"2147483655\" } } ... Shell Output { \"seq\" : NumberLong( \"2147483647\" ) } { \"seq\" : NumberLong( \"2147483649\" ) } { \"seq\" : NumberLong( \"2147483651\" ) } { \"seq\" : NumberLong( \"2147483653\" ) } { \"seq\" : NumberLong( \"2147483655\" ) } ...","title":"$longSequence"},{"location":"operators/%24longSequence/#options","text":"start (optional) Initial value. Default 0 . step (optional) The step increment. Default 1 .","title":"Options"},{"location":"operators/%24longSequence/#example","text":"Template { \"seq\" : { \"$longSeq\" : { \"start\" : 2147483647 \"step\" : 2 } } } Extended JSON Output { \"seq\" : { \"$numberLong\" : \"2147483647\" } } { \"seq\" : { \"$numberLong\" : \"2147483649\" } } { \"seq\" : { \"$numberLong\" : \"2147483651\" } } { \"seq\" : { \"$numberLong\" : \"2147483653\" } } { \"seq\" : { \"$numberLong\" : \"2147483655\" } } ... Shell Output { \"seq\" : NumberLong( \"2147483647\" ) } { \"seq\" : NumberLong( \"2147483649\" ) } { \"seq\" : NumberLong( \"2147483651\" ) } { \"seq\" : NumberLong( \"2147483653\" ) } { \"seq\" : NumberLong( \"2147483655\" ) } ...","title":"Example"},{"location":"operators/%24max/","text":"Computes the maximum value from an array of elements. All elements must be comparable and of the same type. Template { \"maxNumber\" : { \"$max\" : [ 1 , 2 , 5 , 4 , 3 ] } } { \"maxString\" : { \"$max\" : [ \"aaa\" , \"zzz\" , \"ggg\" ] } } Output { \"maxNumber\" : 5 } { \"maxString\" : \"zzz\" }","title":"$max"},{"location":"operators/%24min/","text":"Computes the minimum value from an array of elements. All elements must be comparable and of the same type. Example \u00b6 Template { \"minNumber\" : { \"$min\" : [ 6 , 2 , 3 , 4 , 5 ] } } { \"minString\" : { \"$min\" : [ \"zzz\" , \"aaa\" , \"ggg\" ] } } Output { \"minNumber\" : 2 } { \"minString\" : \"aaa\" }","title":"$min"},{"location":"operators/%24min/#example","text":"Template { \"minNumber\" : { \"$min\" : [ 6 , 2 , 3 , 4 , 5 ] } } { \"minString\" : { \"$min\" : [ \"zzz\" , \"aaa\" , \"ggg\" ] } } Output { \"minNumber\" : 2 } { \"minString\" : \"aaa\" }","title":"Example"},{"location":"operators/%24minute/","text":"Returns the minute from the input date. Options \u00b6 date (optional) Input date. Default random (0-59). Example \u00b6 Template { \"someDate\" : \"$dt\" , \"minute\" : { \"$minute\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-03T15:28:54.721Z\" ) , \"minute\" : 28 }","title":"$minute"},{"location":"operators/%24minute/#options","text":"date (optional) Input date. Default random (0-59).","title":"Options"},{"location":"operators/%24minute/#example","text":"Template { \"someDate\" : \"$dt\" , \"minute\" : { \"$minute\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-03T15:28:54.721Z\" ) , \"minute\" : 28 }","title":"Example"},{"location":"operators/%24mod/","text":"Computes the modulus of the input value. Options \u00b6 input (required) The dividend. Must be numeric. mod (optional) The divisor. Must be numeric. Default 720 . Example \u00b6 Template { \"modulus\" : { \"$mod\" : 721 } } { \"modulus10\" : { \"$mod\" : { \"input\" : 14 , \"mod\" : 10 } } } Output { \"modulus\" : 1 } { \"modulus10\" : 4 }","title":"$mod"},{"location":"operators/%24mod/#options","text":"input (required) The dividend. Must be numeric. mod (optional) The divisor. Must be numeric. Default 720 .","title":"Options"},{"location":"operators/%24mod/#example","text":"Template { \"modulus\" : { \"$mod\" : 721 } } { \"modulus10\" : { \"$mod\" : { \"input\" : 14 , \"mod\" : 10 } } } Output { \"modulus\" : 1 } { \"modulus10\" : 4 }","title":"Example"},{"location":"operators/%24month/","text":"Returns the month from the input date. Options \u00b6 date (required) Input date. type (optional) The output display type ( NUMERIC , LONG_TEXT or SHORT_TEXT ). Default NUMERIC . locale (optional) The display locale. Defaults to Locale.getDefault() . Example \u00b6 Template { \"someDate\" : \"$dt\" , \"num\" : { \"$month\" : \"${someDate}\" }, \"text\" : { \"$month\" : { \"date\" : \"${someDate}\" , \"type\" : \"LONG_TEXT\" , \"locale\" : { \"language\" : \"de\" , \"country\" : \"DE\" } } } } Output { \"someDate\" : ISODate( \"1990-06-05T16:08:39.137Z\" ) , \"num\" : 6 , \"text\" : \"Juni\" }","title":"$month"},{"location":"operators/%24month/#options","text":"date (required) Input date. type (optional) The output display type ( NUMERIC , LONG_TEXT or SHORT_TEXT ). Default NUMERIC . locale (optional) The display locale. Defaults to Locale.getDefault() .","title":"Options"},{"location":"operators/%24month/#example","text":"Template { \"someDate\" : \"$dt\" , \"num\" : { \"$month\" : \"${someDate}\" }, \"text\" : { \"$month\" : { \"date\" : \"${someDate}\" , \"type\" : \"LONG_TEXT\" , \"locale\" : { \"language\" : \"de\" , \"country\" : \"DE\" } } } } Output { \"someDate\" : ISODate( \"1990-06-05T16:08:39.137Z\" ) , \"num\" : 6 , \"text\" : \"Juni\" }","title":"Example"},{"location":"operators/%24now/","text":"Returns the BSON datetime at the point the operator is hydrated. Example \u00b6 Template { \"created\" : \"$now\" } Extended JSON Output { \"created\" : { \"$date\" : \"2017-02-20T04:44:24.880Z\" } } Mongo Shell JSON Output { \"created\" : ISODate( \"2017-02-20T04:44:24.880Z\" ) }","title":"$now"},{"location":"operators/%24now/#example","text":"Template { \"created\" : \"$now\" } Extended JSON Output { \"created\" : { \"$date\" : \"2017-02-20T04:44:24.880Z\" } } Mongo Shell JSON Output { \"created\" : ISODate( \"2017-02-20T04:44:24.880Z\" ) }","title":"Example"},{"location":"operators/%24objectId/","text":"Returns a random BSON ObjectId. Example \u00b6 Template { \"id\" : \"$objectId\" } Output { \"id\" : { \"$oid\" : \"5d866a47981f6d0164b8232a\" } }","title":"$objectId"},{"location":"operators/%24objectId/#example","text":"Template { \"id\" : \"$objectId\" } Output { \"id\" : { \"$oid\" : \"5d866a47981f6d0164b8232a\" } }","title":"Example"},{"location":"operators/%24optional/","text":"Optionally returns an input value based on a boolean flag or a probability. All operators support optionality so this operator is only necessary when dealing with constant values. Options \u00b6 value (required) Input value. isNull (optional) Is null or probability of null value. Accepts boolean or numeric between 0 and 1. Default false . Example \u00b6 Template { \"nullValue\" : { \"$optional\" : { \"value\" : 123 , \"isNull\" : true } } } { \"value\" : { \"$optional\" : { \"value\" : 123 , \"isNull\" : 0.5 } } } Output { } { \"value\" : 123 }","title":"$optional"},{"location":"operators/%24optional/#options","text":"value (required) Input value. isNull (optional) Is null or probability of null value. Accepts boolean or numeric between 0 and 1. Default false .","title":"Options"},{"location":"operators/%24optional/#example","text":"Template { \"nullValue\" : { \"$optional\" : { \"value\" : 123 , \"isNull\" : true } } } { \"value\" : { \"$optional\" : { \"value\" : 123 , \"isNull\" : 0.5 } } } Output { } { \"value\" : 123 }","title":"Example"},{"location":"operators/%24paragraph/","text":"Returns a random paragraph. Options \u00b6 sentences (optional) The number of sentences in the paragraph. Default 3 . Example \u00b6 Template { \"paragraph\" : \"$paragraph\" } Output { \"paragraph\" : \"omnis eos quam ut rem optio maxime magni perferendis ut dolor perspiciatis dolorem eum. maxime sunt provident labore voluptas voluptatibus reiciendis nobis et debitis laudantium odit soluta et. a similique voluptatem qui dolorem deleniti dolor maxime unde expedita non velit quaerat accusamus.\" }","title":"$paragraph"},{"location":"operators/%24paragraph/#options","text":"sentences (optional) The number of sentences in the paragraph. Default 3 .","title":"Options"},{"location":"operators/%24paragraph/#example","text":"Template { \"paragraph\" : \"$paragraph\" } Output { \"paragraph\" : \"omnis eos quam ut rem optio maxime magni perferendis ut dolor perspiciatis dolorem eum. maxime sunt provident labore voluptas voluptatibus reiciendis nobis et debitis laudantium odit soluta et. a similique voluptatem qui dolorem deleniti dolor maxime unde expedita non velit quaerat accusamus.\" }","title":"Example"},{"location":"operators/%24pick/","text":"Takes an array and a number element and returns the element -th value of the array. element is zero-based ( 0 returns the first element). Options \u00b6 array (required) Array of values or operators to choose from. element (optional) Index of the array element to pick. Default 0 . Example \u00b6 Template { \"color\" : { \"$pick\" : { \"array\" : [ \"green\" , \"red\" , \"blue\" ], \"element\" : 1 } } } Output { \"color\" : \"red\" }","title":"$pick"},{"location":"operators/%24pick/#options","text":"array (required) Array of values or operators to choose from. element (optional) Index of the array element to pick. Default 0 .","title":"Options"},{"location":"operators/%24pick/#example","text":"Template { \"color\" : { \"$pick\" : { \"array\" : [ \"green\" , \"red\" , \"blue\" ], \"element\" : 1 } } } Output { \"color\" : \"red\" }","title":"Example"},{"location":"operators/%24pickSet/","text":"Takes an array and a number quantity and returns a new n-element array containing unique values from the input array. Optionally picks with probability proportional to a provided weights array. Options \u00b6 from (required) Array of values or operators to choose from. quantity (optional) The size of the output array. Default 1 . weights (optional) Array of weightings (must be the same length as array ). Example \u00b6 Template { \"color\" : { \"$pickSet\" : { \"from\" : [ \"green\" , \"red\" , \"blue\" ], \"quantity\" : 2 } } } Output { \"color\" : [ \"red\" , \"green\" ] }","title":"$pickSet"},{"location":"operators/%24pickSet/#options","text":"from (required) Array of values or operators to choose from. quantity (optional) The size of the output array. Default 1 . weights (optional) Array of weightings (must be the same length as array ).","title":"Options"},{"location":"operators/%24pickSet/#example","text":"Template { \"color\" : { \"$pickSet\" : { \"from\" : [ \"green\" , \"red\" , \"blue\" ], \"quantity\" : 2 } } } Output { \"color\" : [ \"red\" , \"green\" ] }","title":"Example"},{"location":"operators/%24point/","text":"Returns a GeoJSON formatted Point . Options \u00b6 longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . Example \u00b6 Template { \"point\" : { \"$point\" : { \"longBounds\" : [ -20 , -19 ] } } } Output { \"point\" : { \"type\" : \"Point\" , \"coordinates\" : [ -19.96851 , -47.46141 ] } }","title":"$point"},{"location":"operators/%24point/#options","text":"longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] .","title":"Options"},{"location":"operators/%24point/#example","text":"Template { \"point\" : { \"$point\" : { \"longBounds\" : [ -20 , -19 ] } } } Output { \"point\" : { \"type\" : \"Point\" , \"coordinates\" : [ -19.96851 , -47.46141 ] } }","title":"Example"},{"location":"operators/%24polygon/","text":"Returns a GeoJSON formatted Polygon . Options \u00b6 longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . corners (optional) Number of corners in a polygon. Default 3 . The last point in the coordinates array closes the polygon and does not count towards the number of corners. Example \u00b6 Template { \"line\" : { \"$polygon\" : { \"corners\" : 3 } } } Output { \"line\" : { \"type\" : \"Polygon\" , \"coordinates\" : [[ [ 157.97981016109566 , -4.0566284883708335 ], [ -98.81723187898382 , -35.139170366023876 ], [ -163.00406887762279 , 88.4324536970949 ], [ 157.97981016109566 , -4.0566284883708335 ] ]] } }","title":"$polygon"},{"location":"operators/%24polygon/#options","text":"longBounds (optional) Array of longitude bounds. Default [-180, 180] . latBounds (optional) Array of latitude bounds. Default [-90, 90] . corners (optional) Number of corners in a polygon. Default 3 . The last point in the coordinates array closes the polygon and does not count towards the number of corners.","title":"Options"},{"location":"operators/%24polygon/#example","text":"Template { \"line\" : { \"$polygon\" : { \"corners\" : 3 } } } Output { \"line\" : { \"type\" : \"Polygon\" , \"coordinates\" : [[ [ 157.97981016109566 , -4.0566284883708335 ], [ -98.81723187898382 , -35.139170366023876 ], [ -163.00406887762279 , 88.4324536970949 ], [ 157.97981016109566 , -4.0566284883708335 ] ]] } }","title":"Example"},{"location":"operators/%24regex/","text":"Returns a RegExp object. Options \u00b6 string (optional) The regular expression string. Default '.*' . flags (optional) Flags for the RegExp object. Default '' . Example \u00b6 Template { \"expr\" : { \"$regex\" : { \"string\" : \"^ab+c$\" , \"flags\" : \"i\" } } } Output { \"expr\" : { \"$regularExpression\" : \"^ab+c$\" , \"$options\" : \"i\" } }","title":"$regex"},{"location":"operators/%24regex/#options","text":"string (optional) The regular expression string. Default '.*' . flags (optional) Flags for the RegExp object. Default '' .","title":"Options"},{"location":"operators/%24regex/#example","text":"Template { \"expr\" : { \"$regex\" : { \"string\" : \"^ab+c$\" , \"flags\" : \"i\" } } } Output { \"expr\" : { \"$regularExpression\" : \"^ab+c$\" , \"$options\" : \"i\" } }","title":"Example"},{"location":"operators/%24second/","text":"Returns the second from the input date. Options \u00b6 date (optional) Input date. Default random (0-59). Example \u00b6 Template { \"someDate\" : \"$dt\" , \"second\" : { \"$second\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"second\" : 54 }","title":"$second"},{"location":"operators/%24second/#options","text":"date (optional) Input date. Default random (0-59).","title":"Options"},{"location":"operators/%24second/#example","text":"Template { \"someDate\" : \"$dt\" , \"second\" : { \"$second\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"second\" : 54 }","title":"Example"},{"location":"operators/%24sentence/","text":"Returns a random sentence. Options \u00b6 words (optional) The number of words in the sentence. Default 12 . Example \u00b6 Template { \"sentence\" : \"$sentence\" } Output { \"sentence\" : \"quo cupiditate quibusdam et consequatur doloribus labore et velit possimus molestiae animi.\" }","title":"$sentence"},{"location":"operators/%24sentence/#options","text":"words (optional) The number of words in the sentence. Default 12 .","title":"Options"},{"location":"operators/%24sentence/#example","text":"Template { \"sentence\" : \"$sentence\" } Output { \"sentence\" : \"quo cupiditate quibusdam et consequatur doloribus labore et velit possimus molestiae animi.\" }","title":"Example"},{"location":"operators/%24string/","text":"Returns a random string. Options \u00b6 length (optional) Length of output string. Default 5 pool (optional) Character pool to construct string from. Defaults to alpha, numeric and some symbols. Example \u00b6 Template { \"string\" : { \"$string\" : { \"length\" : 20 , \"pool\" : \"MONGO40*\" } } } Output { \"string\" : \"*44NGOMGN*ONOGOO*4O0\" }","title":"$string"},{"location":"operators/%24string/#options","text":"length (optional) Length of output string. Default 5 pool (optional) Character pool to construct string from. Defaults to alpha, numeric and some symbols.","title":"Options"},{"location":"operators/%24string/#example","text":"Template { \"string\" : { \"$string\" : { \"length\" : 20 , \"pool\" : \"MONGO40*\" } } } Output { \"string\" : \"*44NGOMGN*ONOGOO*4O0\" }","title":"Example"},{"location":"operators/%24ts/","text":"Returns a random BSON Timestamp. Aliases: $ts , $mgTimestamp Options \u00b6 t (optional) Seconds since epoch. Default random. i (optional) Increment value. Default random. Example \u00b6 Template { \"ts\" : { \"$ts\" : { \"t\" : \"$int\" , \"i\" : 20 } } } Output { \"ts\" : Timestamp( 1597439758 , 20) }","title":"$ts"},{"location":"operators/%24ts/#options","text":"t (optional) Seconds since epoch. Default random. i (optional) Increment value. Default random.","title":"Options"},{"location":"operators/%24ts/#example","text":"Template { \"ts\" : { \"$ts\" : { \"t\" : \"$int\" , \"i\" : 20 } } } Output { \"ts\" : Timestamp( 1597439758 , 20) }","title":"Example"},{"location":"operators/%24url/","text":"Chooses one element from an array of possible choices with uniform probability. Optionally chooses with probability proportional to a provided weights array. Options \u00b6 domain (optional) Domain name for url. path (optional) Path for url. extension (optional) include file extension ( true / false ). Example \u00b6 Template { \"url\" : { \"$url\" : { \"domain\" : \"mongodb.org\" \"extension\" : true } } } Output { \"url\" : \"http://mongodb.org/eveniet/quaerat.css\" }","title":"$url"},{"location":"operators/%24url/#options","text":"domain (optional) Domain name for url. path (optional) Path for url. extension (optional) include file extension ( true / false ).","title":"Options"},{"location":"operators/%24url/#example","text":"Template { \"url\" : { \"$url\" : { \"domain\" : \"mongodb.org\" \"extension\" : true } } } Output { \"url\" : \"http://mongodb.org/eveniet/quaerat.css\" }","title":"Example"},{"location":"operators/%24uuid/","text":"Returns a random UUID. Options \u00b6 type (optional) The data type of the UUID ( BINARY or STRING ). Default BINARY . Example \u00b6 Template { \"uuid\" : \"$uuid\" } { \"stringUuid\" : { \"$uuid\" : \"STRING\" } } Extended JSON Output { \"uuid\" : { \"$binary\" : { \"base64\" : \"2dFU/OjFRZac1SJzI1PDXw==\" , \"subType\" : \"04\" } } } { \"stringUuid\" : \"606340f0-fceb-419b-91c5-fdf192d08fad\" } Compass/Shell Output { \"uuid\" : UUID( \"ee780ef4-362f-45ca-a816-55120e0afe18\" ) } { \"stringUuid\" : \"606340f0-fceb-419b-91c5-fdf192d08fad\" }","title":"$uuid"},{"location":"operators/%24uuid/#options","text":"type (optional) The data type of the UUID ( BINARY or STRING ). Default BINARY .","title":"Options"},{"location":"operators/%24uuid/#example","text":"Template { \"uuid\" : \"$uuid\" } { \"stringUuid\" : { \"$uuid\" : \"STRING\" } } Extended JSON Output { \"uuid\" : { \"$binary\" : { \"base64\" : \"2dFU/OjFRZac1SJzI1PDXw==\" , \"subType\" : \"04\" } } } { \"stringUuid\" : \"606340f0-fceb-419b-91c5-fdf192d08fad\" } Compass/Shell Output { \"uuid\" : UUID( \"ee780ef4-362f-45ca-a816-55120e0afe18\" ) } { \"stringUuid\" : \"606340f0-fceb-419b-91c5-fdf192d08fad\" }","title":"Example"},{"location":"operators/%24word/","text":"Returns a random word. Example \u00b6 Template { \"word\" : \"$word\" } Output { \"word\" : \"atque\" }","title":"$word"},{"location":"operators/%24word/#example","text":"Template { \"word\" : \"$word\" } Output { \"word\" : \"atque\" }","title":"Example"},{"location":"operators/%24year/","text":"Returns the year from the input date. Options \u00b6 date (optional) Input date. Default random (1900-2019). Example \u00b6 Template { \"someDate\" : \"$dt\" , \"year\" : { \"$year\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"year\" : 2016 }","title":"$year"},{"location":"operators/%24year/#options","text":"date (optional) Input date. Default random (1900-2019).","title":"Options"},{"location":"operators/%24year/#example","text":"Template { \"someDate\" : \"$dt\" , \"year\" : { \"$year\" : \"${someDate}\" } } Output { \"someDate\" : ISODate( \"2016-06-28T15:28:54.721Z\" ) , \"year\" : 2016 }","title":"Example"}]}